from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton


manager_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data='manager_new_orders'),
     InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='manager_stats')],
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='manager_my_orders'),
     InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='manager_profile')]
])

def get_new_orders_keyboard(order_groups: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    for idx, group in enumerate(order_groups, start=1):
        buttons.append(InlineKeyboardButton(text=str(idx), callback_data=f"manager_order_detail:{group.id}"))
    row1 = buttons[:5]
    row2 = buttons[5:10]
    keyboard_buttons = []
    if row1:
        keyboard_buttons.append(row1)
    if row2:
        keyboard_buttons.append(row2)
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="<<", callback_data=f"manager_new_orders_page:{page-1}"))
    pagination.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text=">>", callback_data=f"manager_new_orders_page:{page+1}"))
    if pagination:
        keyboard_buttons.append(pagination)
    keyboard_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_to_manager_dashboard")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def get_manager_order_detail_keyboard(order_group_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"manager_edit_order:{order_group_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"manager_cancel_order:{order_group_id}"),
         InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"manager_accept_order:{order_group_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="manager_new_orders")]
    ])
    return keyboard

def get_cancel_order_confirmation_keyboard(order_group_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"manager_cancel_order_confirm:{order_group_id}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"manager_order_detail:{order_group_id}")]
    ])
    return keyboard

def get_manager_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="manager_new_orders"),
         InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="manager_my_orders")],
        [InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="go_to_manager_dashboard")]
    ])
    return keyboard

def get_manager_order_edit_keyboard(order_group_id: int, order_items: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    for item in order_items:
        btn_text = f"{item.product.name} ({item.display_color}, {item.display_size}) - {item.quantity} —à—Ç."
        buttons.append(InlineKeyboardButton(text=btn_text, callback_data=f"manager_edit_product:{order_group_id}:{item.id}:{page}"))
    # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    keyboard_buttons = [[btn] for btn in buttons]
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="<<", callback_data=f"manager_order_edit_page:{order_group_id}:{page-1}"))
    pagination.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text=">>", callback_data=f"manager_order_edit_page:{order_group_id}:{page+1}"))
    if pagination:
        keyboard_buttons.append(pagination)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    keyboard_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"manager_order_detail:{order_group_id}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_manager_product_edit_keyboard(order_item_id: int, product, order_item, group_id: int,
                                      chosen_color: str, chosen_size: str) -> InlineKeyboardMarkup:
    keyboard_buttons = []
    # –†—è–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    row_size = [
        InlineKeyboardButton(text="-", callback_data=f"manager_change_size:{order_item_id}:dec:{group_id}"),
        InlineKeyboardButton(text=f"{chosen_size}", callback_data="ignore"),
        InlineKeyboardButton(text="+", callback_data=f"manager_change_size:{order_item_id}:inc:{group_id}")
    ]
    keyboard_buttons.append(row_size)
    # –†—è–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    row_color = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"manager_change_color:{order_item_id}:dec:{group_id}"),
        InlineKeyboardButton(text=f"{chosen_color}", callback_data="ignore"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"manager_change_color:{order_item_id}:inc:{group_id}")
    ]
    keyboard_buttons.append(row_color)
    # –†—è–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    row_qty = [
        InlineKeyboardButton(text="-", callback_data=f"manager_change_qty:{order_item_id}:dec:{group_id}"),
        InlineKeyboardButton(text=f"{order_item.quantity}", callback_data="ignore"),
        InlineKeyboardButton(text="+", callback_data=f"manager_change_qty:{order_item_id}:inc:{group_id}")
    ]
    keyboard_buttons.append(row_qty)
    # –†—è–¥ –¥–µ–π—Å—Ç–≤–∏–π: –ü–µ—Ä–µ–¥–∞—ë–º group_id –≤ –æ–±–µ –∫–Ω–æ–ø–∫–∏
    row_actions = [
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"manager_delete_product:{order_item_id}:{group_id}"),
        InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"manager_update_product:{order_item_id}:{group_id}")
    ]
    keyboard_buttons.append(row_actions)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"manager_edit_order:{group_id}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_delete_product_confirmation_keyboard(order_item_id: int, group_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"manager_delete_product_confirm:{order_item_id}:{group_id}"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"manager_edit_product:{group_id}:{order_item_id}")]
    ])
    return keyboard


def get_accept_order_confirmation_keyboard(order_group_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"manager_accept_order_confirm:{order_group_id}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"manager_order_detail:{order_group_id}")]
    ])
    return keyboard


def go_to_manager_dashboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_to_manager_dashboard")]
    ])
    return keyboard


def get_manager_orders_keyboard(order_groups_data: list, status_filter: str, sort_order: str, page: int,
                                total_pages: int) -> InlineKeyboardMarkup:
    keyboard_buttons = []
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è - –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"
    for (group, fullname, order_datetime) in order_groups_data:
        date_str = order_datetime.strftime("%d-%m-%Y")
        button_text = f"{fullname} - {date_str}"
        keyboard_buttons.append(
            [InlineKeyboardButton(text=button_text, callback_data=f"manager_order_detail_my:{group.id}")])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton(text="<<",
                                               callback_data=f"manager_my_orders_page:{status_filter}:{sort_order}:{page - 1}"))
    pagination.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton(text=">>",
                                               callback_data=f"manager_my_orders_page:{status_filter}:{sort_order}:{page + 1}"))
    if pagination:
        keyboard_buttons.append(pagination)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—ã–µ ("accepted"), –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ" –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
    if status_filter == "accepted":
        filter_button = InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
            callback_data=f"manager_my_orders_filter:cancelled:{sort_order}:{page}"
        )
    else:
        filter_button = InlineKeyboardButton(
            text="–ü—Ä–∏–Ω—è—Ç—ã–µ",
            callback_data=f"manager_my_orders_filter:accepted:{sort_order}:{page}"
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_button = InlineKeyboardButton(
        text="–ü–æ —É–±—ã–≤–∞–Ω–∏—é" if sort_order == "asc" else "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é",
        callback_data=f"manager_my_orders_sort:{status_filter}:{'desc' if sort_order == 'asc' else 'asc'}:{page}"
    )
    keyboard_buttons.append([filter_button, sort_button])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_to_manager_dashboard")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_manager_order_detail_keyboard_m(order_group_id: int) -> InlineKeyboardMarkup:
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="manager_my_orders")]
    ])