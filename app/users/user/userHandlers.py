import json
import re
import pytz
from datetime import datetime
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart, Command
from aiogram import F, Router
from app.database import requests as rq
from aiogram.fsm.context import FSMContext
from app.utils import sent_message_add_screen_ids, router
from app.users.user import userStates as st
import app.users.user.userKeyboards as kb
from app import utils
from aiogram.enums import ParseMode


async def delete_previous_messages(message: Message, telegram_id: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id not in sent_message_add_screen_ids:
        sent_message_add_screen_ids[telegram_id] = {'bot_messages': [], 'user_messages': []}

    user_data = sent_message_add_screen_ids[telegram_id]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ "/start"
    for msg_id in user_data['user_messages']:
        try:
            if msg_id != message.message_id or message.text != "/start":
                await message.bot.delete_message(chat_id=telegram_id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    user_data['user_messages'].clear()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    for msg_id in user_data['bot_messages']:
        try:
            if msg_id != message.message_id:
                await message.bot.delete_message(chat_id=telegram_id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    user_data['bot_messages'].clear()


# User's personal account
async def user_account(message: Message, state: FSMContext):
    tuid = message.chat.id
    if tuid not in sent_message_add_screen_ids:
        sent_message_add_screen_ids[tuid] = {'bot_messages': [], 'user_messages': []}
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    await state.clear()

    sent_message = await message.answer_photo(
        photo=utils.user_png,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ",
        reply_markup=kb.user_button
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    user_data['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'go_to_user_dashboard')
async def go_to_dashboard(callback_query: CallbackQuery, state: FSMContext):
    await user_account(callback_query.message, state)


@router.callback_query(F.data == 'user_settings')
async def user_settings(callback_query: CallbackQuery, state: FSMContext):
    info = await rq.get_user_info_by_id(str(callback_query.from_user.id))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ info –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á "answer"
    if "answer" in info:
        caption = f"–û—à–∏–±–∫–∞: {info['answer']}"
    else:
        caption = (
            f"üë§ –§–ò–û: {info['full_name']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {info['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['phone_number']}"
        )
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption=caption
        ),
        reply_markup=kb.user_settings_setting
    )


@router.callback_query(F.data == 'change_fullname')
async def change_fullname(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
        ),
        reply_markup=kb.go_to_user_dashboard
    )
    await state.set_state(st.ChangeFullname.write_fullname)


@router.message(st.ChangeFullname.write_fullname)
async def change_fullname_second(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    is_updated = await rq.update_user_full_name(str(message.from_user.id), message.text)

    if is_updated:
        await message.answer("–í–∞—à–µ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                             reply_markup=kb.user_settings)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –§–ò–û",
                             reply_markup=kb.user_settings)


@router.callback_query(F.data == 'change_phone')
async def change_phone(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX:"
        ),
        reply_markup=kb.go_to_user_dashboard
    )
    await state.set_state(st.ChangePhone.write_phone)


@router.message(st.ChangePhone.write_phone)
async def change_phone_second(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    phone = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ñ–æ—Ä–º–∞—Ç +996XXXXXXXXX (4 —Å–∏–º–≤–æ–ª–∞ + 9 —Ü–∏—Ñ—Ä)
    if not re.fullmatch(r'\+996\d{9}', phone):
        sent_message = await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX",
            reply_markup=kb.user_settings
        )
        user_data['bot_messages'].append(sent_message.message_id)
        return

    is_updated = await rq.update_user_phone(str(message.from_user.id), phone)
    if is_updated:
        sent_message = await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.user_settings)
        user_data['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb.user_settings)
        user_data['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'change_delivery')
async def change_address(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:"
        ),
        reply_markup=kb.go_to_user_dashboard
    )
    await state.set_state(st.ChangeAddress.write_address)


@router.message(st.ChangeAddress.write_address)
async def change_address_second(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    is_updated = await rq.update_user_address(str(message.from_user.id), message.text)
    if is_updated:
        await message.answer("–í–∞—à –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.user_settings)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å", reply_markup=kb.user_settings)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
CATEGORIES_PER_PAGE = 5
SUBCATEGORIES_PER_PAGE = 5

async def safe_edit_message(message: Message, text: str, reply_markup):
    if message.text is not None:
        return await message.edit_text(text, reply_markup=reply_markup)
    elif message.caption is not None:
        return await message.edit_caption(caption=text, reply_markup=reply_markup)
    else:
        return await message.answer(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üî∞ –ö–∞—Ç–∞–ª–æ–≥"
@router.callback_query(F.data == 'user_catalog')
async def show_catalog(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    page = 1
    categories = await rq.catalog_get_categories(page, CATEGORIES_PER_PAGE)
    total_count = await rq.catalog_get_total_categories()
    total_pages = (total_count + CATEGORIES_PER_PAGE - 1) // CATEGORIES_PER_PAGE
    keyboard = kb.get_categories_keyboard(categories, page, total_pages)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith('select_category:'))
async def select_category(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: select_category:{category_id}:{page}
    data = callback_query.data.split(':')
    category_id = int(data[1])
    page = int(data[2])
    subcategories = await rq.catalog_get_subcategories(category_id, 1, SUBCATEGORIES_PER_PAGE)
    total_count = await rq.catalog_get_total_subcategories(category_id)
    total_pages = (total_count + SUBCATEGORIES_PER_PAGE - 1) // SUBCATEGORIES_PER_PAGE
    keyboard = kb.get_subcategories_keyboard(subcategories, category_id, 1, total_pages)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith('cat_page:'))
async def category_page(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: cat_page:{page}
    data = callback_query.data.split(':')
    page = int(data[1])
    categories = await rq.catalog_get_categories(page, CATEGORIES_PER_PAGE)
    total_count = await rq.catalog_get_total_categories()
    total_pages = (total_count + CATEGORIES_PER_PAGE - 1) // CATEGORIES_PER_PAGE
    keyboard = kb.get_categories_keyboard(categories, page, total_pages)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith('subcat_page:'))
async def subcategory_page(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: subcat_page:{category_id}:{page}
    data = callback_query.data.split(':')
    category_id = int(data[1])
    page = int(data[2])
    subcategories = await rq.catalog_get_subcategories(category_id, page, SUBCATEGORIES_PER_PAGE)
    total_count = await rq.catalog_get_total_subcategories(category_id)
    total_pages = (total_count + SUBCATEGORIES_PER_PAGE - 1) // SUBCATEGORIES_PER_PAGE
    keyboard = kb.get_subcategories_keyboard(subcategories, category_id, page, total_pages)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äì –≤—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith('select_subcat:'))
async def select_subcategory(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: select_subcat:{subcategory_id}:{category_id}:{page}
    data = callback_query.data.split(':')
    subcat_id = int(data[1])
    category_id = int(data[2])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    if not products:
        await safe_edit_message(callback_query.message, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=None)
        return
    product_index = 0
    photo_index = 0
    product = products[product_index]
    photos = await rq.catalog_get_product_photos(product.id)
    photo_file = photos[photo_index].file_id if photos else utils.user_second_png
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}"
    # –ü–µ—Ä–µ–¥–∞—ë–º category_id –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    keyboard = kb.get_product_view_keyboard(category_id, subcat_id, product_index, photo_index,
                                              len(products), (len(photos) if photos else 0))
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—Å—Ç–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith('photo_nav:'))
async def product_photo_navigation(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: photo_nav:{direction}:{subcat_id}:{product_index}:{photo_index}:{category_id}
    data = callback_query.data.split(':')
    direction = data[1]
    subcat_id = int(data[2])
    product_index = int(data[3])
    photo_index = int(data[4])
    category_id = int(data[5])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    if not products:
        await safe_edit_message(callback_query.message, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=None)
        return
    product = products[product_index]
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    if total_photos == 0:
        photo_file = utils.user_second_png
        new_photo_index = 0
    else:
        new_photo_index = (photo_index + 1) % total_photos if direction == "next" else (photo_index - 1 + total_photos) % total_photos
        photo_file = photos[new_photo_index].file_id
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}"
    keyboard = kb.get_product_view_keyboard(category_id, subcat_id, product_index, new_photo_index,
                                              len(products), total_photos)
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (‚è™, ‚è©)
@router.callback_query(F.data.startswith('prod_nav:'))
async def product_navigation(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: prod_nav:{direction}:{subcat_id}:{product_index}:{category_id}
    data = callback_query.data.split(':')
    direction = data[1]
    subcat_id = int(data[2])
    product_index = int(data[3])
    category_id = int(data[4])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    total_products = len(products)
    if total_products == 0:
        await safe_edit_message(callback_query.message, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=None)
        return
    new_index = (product_index + 1) % total_products if direction == "next" else (product_index - 1 + total_products) % total_products
    new_photo_index = 0
    product = products[new_index]
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    photo_file = photos[new_photo_index].file_id if total_photos > 0 else utils.user_second_png
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}"
    keyboard = kb.get_product_view_keyboard(category_id, subcat_id, new_index, new_photo_index,
                                              total_products, total_photos)
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
@router.callback_query(F.data.startswith('prod_back:'))
async def product_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: prod_back:{category_id}:{page}
    data = callback_query.data.split(':')
    category_id = int(data[1])
    page = int(data[2])
    subcategories = await rq.catalog_get_subcategories(category_id, page, SUBCATEGORIES_PER_PAGE)
    total_count = await rq.catalog_get_total_subcategories(category_id)
    total_pages = (total_count + SUBCATEGORIES_PER_PAGE - 1) // SUBCATEGORIES_PER_PAGE
    keyboard = kb.get_subcategories_keyboard(subcategories, category_id, page, total_pages)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    # –ú–µ–Ω—è–µ–º –º–µ–¥–∏–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await callback_query.message.edit_media(
         media=InputMediaPhoto(media=utils.user_second_png, caption=text),
         reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõí –≤ –∫–æ—Ä–∑–∏–Ω—É" ‚Äì –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith('to_cart:'))
async def to_cart(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: to_cart:{subcat_id}:{product_index}:{photo_index}:{category_id}
    data = callback_query.data.split(':')
    subcat_id = int(data[1])
    product_index = int(data[2])
    photo_index = int(data[3])
    category_id = int(data[4])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    product = products[product_index]
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    photo_file = photos[photo_index].file_id if total_photos > 0 else utils.user_second_png

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤
    available_sizes = product.size_ids if product.size_ids else []
    available_colors = product.color_ids if product.color_ids else []
    available_size_names = [await rq.catalog_get_size_name(sid) for sid in available_sizes]
    available_color_names = [await rq.catalog_get_color_name(cid) for cid in available_colors]
    size_index = 0 if available_size_names else -1
    color_index = 0 if available_color_names else -1
    quantity = 1
    text = (f"–ü–û–î–†–û–ë–ù–ï–ï –û –¢–û–í–ê–†–ï:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n{product.usage}\n"
            f"–¶–µ–Ω–∞: {product.price}\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {product.material}\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {product.features}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {product.temperature_range}")
    keyboard = kb.get_cart_view_keyboard(category_id, subcat_id, product_index, photo_index,
                                           size_index, color_index, quantity,
                                           available_size_names, available_color_names)
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
@router.callback_query(F.data.startswith('cart_size:'))
async def cart_size_adjust(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: cart_size:{action}:{category_id}:{subcat_id}:{product_index}:{photo_index}:{size_index}:{color_index}:{quantity}
    data = callback_query.data.split(':')
    action = data[1]
    category_id = int(data[2])
    subcat_id = int(data[3])
    product_index = int(data[4])
    photo_index = int(data[5])
    size_index = int(data[6])
    color_index = int(data[7])
    quantity = int(data[8])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    product = products[product_index]
    available_sizes = product.size_ids if product.size_ids else []
    if not available_sizes:
        return
    new_size_index = (size_index + 1) % len(available_sizes) if action == "inc" else (size_index - 1 + len(available_sizes)) % len(available_sizes)
    available_size_names = [await rq.catalog_get_size_name(sid) for sid in available_sizes]
    available_color_names = [await rq.catalog_get_color_name(cid) for cid in (product.color_ids if product.color_ids else [])]
    keyboard = kb.get_cart_view_keyboard(category_id, subcat_id, product_index, photo_index,
                                           new_size_index, color_index, quantity,
                                           available_size_names, available_color_names)
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    photo_file = photos[photo_index].file_id if total_photos > 0 else utils.user_second_png
    text = (f"–ü–û–î–†–û–ë–ù–ï–ï –û –¢–û–í–ê–†–ï:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n{product.usage}\n"
            f"–¶–µ–Ω–∞: {product.price}\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {product.material}\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {product.features}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {product.temperature_range}")
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
@router.callback_query(F.data.startswith('cart_color:'))
async def cart_color_adjust(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: cart_color:{action}:{category_id}:{subcat_id}:{product_index}:{photo_index}:{size_index}:{color_index}:{quantity}
    data = callback_query.data.split(':')
    action = data[1]
    category_id = int(data[2])
    subcat_id = int(data[3])
    product_index = int(data[4])
    photo_index = int(data[5])
    size_index = int(data[6])
    color_index = int(data[7])
    quantity = int(data[8])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    product = products[product_index]
    available_colors = product.color_ids if product.color_ids else []
    if not available_colors:
        return
    new_color_index = (color_index + 1) % len(available_colors) if action == "inc" else (color_index - 1 + len(available_colors)) % len(available_colors)
    available_size_names = [await rq.catalog_get_size_name(sid) for sid in (product.size_ids if product.size_ids else [])]
    available_color_names = [await rq.catalog_get_color_name(cid) for cid in available_colors]
    keyboard = kb.get_cart_view_keyboard(category_id, subcat_id, product_index, photo_index,
                                           size_index, new_color_index, quantity,
                                           available_size_names, available_color_names)
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    photo_file = photos[photo_index].file_id if total_photos > 0 else utils.user_second_png
    text = (f"–ü–û–î–†–û–ë–ù–ï–ï –û –¢–û–í–ê–†–ï:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n{product.usage}\n"
            f"–¶–µ–Ω–∞: {product.price}\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {product.material}\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {product.features}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {product.temperature_range}")
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith('cart_qty:'))
async def cart_quantity_adjust(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: cart_qty:{action}:{category_id}:{subcat_id}:{product_index}:{photo_index}:{size_index}:{color_index}:{quantity}
    data = callback_query.data.split(':')
    action = data[1]
    category_id = int(data[2])
    subcat_id = int(data[3])
    product_index = int(data[4])
    photo_index = int(data[5])
    size_index = int(data[6])
    color_index = int(data[7])
    quantity = int(data[8])
    new_quantity = quantity + 1 if action == "inc" else max(1, quantity - 1)
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    product = products[product_index]
    available_size_names = [await rq.catalog_get_size_name(sid) for sid in (product.size_ids if product.size_ids else [])]
    available_color_names = [await rq.catalog_get_color_name(cid) for cid in (product.color_ids if product.color_ids else [])]
    keyboard = kb.get_cart_view_keyboard(category_id, subcat_id, product_index, photo_index,
                                           size_index, color_index, new_quantity,
                                           available_size_names, available_color_names)
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    photo_file = photos[photo_index].file_id if total_photos > 0 else utils.user_second_png
    text = (f"–ü–û–î–†–û–ë–ù–ï–ï –û –¢–û–í–ê–†–ï:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n{product.usage}\n"
            f"–¶–µ–Ω–∞: {product.price}\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {product.material}\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {product.features}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {product.temperature_range}")
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∑–∏–Ω—ã ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith('cart_back:'))
async def cart_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: cart_back:{category_id}:{subcat_id}:{product_index}:{photo_index}
    data = callback_query.data.split(':')
    category_id = int(data[1])
    subcat_id = int(data[2])
    product_index = int(data[3])
    photo_index = int(data[4])
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    product = products[product_index]
    photos = await rq.catalog_get_product_photos(product.id)
    total_photos = len(photos) if photos else 0
    photo_file = photos[photo_index].file_id if total_photos > 0 else utils.user_second_png
    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}"
    keyboard = kb.get_product_view_keyboard(category_id, subcat_id, product_index, photo_index, len(products), total_photos)
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith('cart_confirm:'))
async def cart_confirm(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: cart_confirm:{category_id}:{subcat_id}:{product_index}:{photo_index}:{size_index}:{color_index}:{quantity}
    data = callback_query.data.split(':')
    category_id = int(data[1])
    subcat_id = int(data[2])
    product_index = int(data[3])
    photo_index = int(data[4])
    size_index = int(data[5])
    color_index = int(data[6])
    quantity = int(data[7])
    user_id = callback_query.from_user.id
    products = await rq.catalog_get_products_by_subcategory(subcat_id)
    product = products[product_index]
    available_sizes = product.size_ids if product.size_ids else []
    available_colors = product.color_ids if product.color_ids else []
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —Ü–≤–µ—Ç–∞ –∫–∞–∫ id
    chosen_size = available_sizes[size_index] if available_sizes else None
    chosen_color = available_colors[color_index] if available_colors else None
    user_info = await rq.get_user_info_by_id(str(user_id))
    delivery_method = "–¥–æ—Å—Ç–∞–≤–∫–∞" if user_info.get("address") else "–°–∞–º–æ–≤—ã–≤–æ–∑"
    order_created = await rq.add_to_cart(user_id, product, quantity, chosen_size, chosen_color, delivery_method)
    if order_created:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è category_id –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1)
        keyboard = kb.get_order_success_keyboard(category_id, 1)
        await safe_edit_message(callback_query.message, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=keyboard)
    else:
        await safe_edit_message(callback_query.message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.go_to_user_dashboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith('order_success_back:'))
async def order_success_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –§–æ—Ä–º–∞—Ç: order_success_back:{category_id}:{page}
    data = callback_query.data.split(':')
    category_id = int(data[1])
    page = int(data[2])  # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcategories = await rq.catalog_get_subcategories(category_id, page, SUBCATEGORIES_PER_PAGE)
    total_count = await rq.catalog_get_total_subcategories(category_id)
    total_pages = (total_count + SUBCATEGORIES_PER_PAGE - 1) // SUBCATEGORIES_PER_PAGE
    keyboard = kb.get_subcategories_keyboard(subcategories, category_id, page, total_pages)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback_query.message.edit_media(
         media=InputMediaPhoto(media=utils.user_second_png, caption=text),
         reply_markup=keyboard
    )


async def safe_edit_message(message: Message, text: str, reply_markup):
    if message.text is not None:
        return await message.edit_text(text, reply_markup=reply_markup)
    elif message.caption is not None:
        return await message.edit_caption(caption=text, reply_markup=reply_markup)
    else:
        return await message.answer(text, reply_markup=reply_markup)


# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üõí –ö–æ—Ä–∑–∏–Ω–∞"
@router.callback_query(F.data == 'user_cart')
async def cart_main(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    cart_orders = await rq.get_cart_order(str(user_id))
    items = []
    if cart_orders:
        for order in cart_orders:
            items.extend(order.order_items)
    if not items:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    else:
        lines = []
        total_cost = 0
        for idx, item in enumerate(items, start=1):
            product = await rq.get_product(item.product_id)
            color_name = await rq.catalog_get_color_name(item.chosen_color) if item.chosen_color else "N/A"
            size_name = await rq.catalog_get_size_name(item.chosen_size) if item.chosen_size else "N/A"
            line = (f"{idx}. {product.name} ({color_name}, {size_name})\n"
                    f"{item.quantity} —à—Ç * {product.price} = {item.quantity * float(product.price)}")
            lines.append(line)
            total_cost += item.quantity * float(product.price)
        text = "\n\n".join(lines)
        text += f"\n\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}"
    keyboard = kb.get_cart_main_keyboard()
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=utils.user_second_png, caption=text),
        reply_markup=keyboard
    )


# 2. –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ‚Äî –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == 'cart_clear')
async def cart_clear_confirm(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    keyboard = kb.get_cart_clear_confirmation_keyboard()
    text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?"
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)


@router.callback_query(F.data == 'cart_clear_yes')
async def cart_clear_yes(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    success = await rq.clear_cart(str(user_id))
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞." if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã."
    keyboard = kb.get_cart_main_keyboard()
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)


@router.callback_query(F.data == 'cart_clear_no')
async def cart_clear_no(callback_query: CallbackQuery, state: FSMContext):
    await cart_main(callback_query, state)


# 3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data == 'cart_edit')
async def cart_edit(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    cart_orders = await rq.get_cart_order(str(user_id))
    items = []
    if cart_orders:
        for order in cart_orders:
            items.extend(order.order_items)
    if not items:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        keyboard = kb.get_cart_main_keyboard()
        await safe_edit_message(callback_query.message, text, reply_markup=keyboard)
        return
    buttons = []
    for item in items:
        product = await rq.get_product(item.product_id)
        color_name = await rq.catalog_get_color_name(item.chosen_color) if item.chosen_color else "N/A"
        size_name = await rq.catalog_get_size_name(item.chosen_size) if item.chosen_size else "N/A"
        button_text = f"{product.name} ({color_name}, {size_name}) - {item.quantity} —à—Ç"
        callback_data = f"cart_edit_item:{item.id}"
        buttons.append((button_text, callback_data))
    keyboard = kb.get_cart_edit_list_keyboard(buttons)
    text = "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã:"
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ edit_media, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ safe_edit_message
    if callback_query.message.photo:
        await callback_query.message.edit_media(
            media=InputMediaPhoto(media=utils.user_second_png, caption=text),
            reply_markup=keyboard
        )
    else:
        await safe_edit_message(callback_query.message, text, reply_markup=keyboard)



# 4. –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith('cart_edit_item:'))
async def cart_edit_item(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = callback_query.data.split(':')
    order_item_id = int(data[1])
    order_item = await rq.get_order_item(order_item_id)
    product = await rq.get_product(order_item.product_id)
    photos = await rq.catalog_get_product_photos(product.id) if hasattr(rq, 'catalog_get_product_photos') else None
    photo_file = photos[0].file_id if photos else utils.user_second_png
    current_size = order_item.chosen_size
    current_color = order_item.chosen_color
    current_qty = order_item.quantity
    current_size_name = await rq.catalog_get_size_name(current_size) if current_size else "N/A"
    current_color_name = await rq.catalog_get_color_name(current_color) if current_color else "N/A"
    available_sizes = product.size_ids if product.size_ids else []
    available_colors = product.color_ids if product.color_ids else []
    available_size_names = [await rq.catalog_get_size_name(sid) for sid in available_sizes]
    available_color_names = [await rq.catalog_get_color_name(cid) for cid in available_colors]
    keyboard = kb.get_cart_item_edit_keyboard(
        order_item_id,
        product.id,
        current_size_name,
        current_color_name,
        current_qty,
        available_size_names,
        available_color_names
    )
    text = f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}"
    await callback_query.message.edit_media(
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=keyboard
    )


# 5. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith('cart_item_edit:'))
async def cart_item_edit(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = callback_query.data.split(':')
    order_item_id = int(data[1])
    field = data[2]  # –º–æ–∂–µ—Ç –±—ã—Ç—å "size", "color", "qty", "delete", "confirm", "back"

    if field == "delete":
        keyboard = kb.get_cart_item_delete_confirmation_keyboard(order_item_id)
        text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?"
        await safe_edit_message(callback_query.message, text, reply_markup=keyboard)
        return

    if field == "back":
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        await cart_edit(callback_query, state)
        return

    if field == "confirm":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        await cart_edit(callback_query, state)
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "inc" –∏–ª–∏ "dec")
    if len(data) < 4:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    action = data[3]  # "inc" –∏–ª–∏ "dec"
    success = await rq.update_cart_item_field(order_item_id, field, action)
    if success:
        order_item = await rq.get_order_item(order_item_id)
        product = await rq.get_product(order_item.product_id)
        photos = await rq.catalog_get_product_photos(product.id) if hasattr(rq, 'catalog_get_product_photos') else None
        photo_file = photos[0].file_id if photos else utils.user_second_png
        current_size = order_item.chosen_size
        current_color = order_item.chosen_color
        current_qty = order_item.quantity
        current_size_name = await rq.catalog_get_size_name(current_size) if current_size else "N/A"
        current_color_name = await rq.catalog_get_color_name(current_color) if current_color else "N/A"
        available_sizes = product.size_ids if product.size_ids else []
        available_colors = product.color_ids if product.color_ids else []
        available_size_names = [await rq.catalog_get_size_name(sid) for sid in available_sizes]
        available_color_names = [await rq.catalog_get_color_name(cid) for cid in available_colors]
        keyboard = kb.get_cart_item_edit_keyboard(
            order_item_id,
            product.id,
            current_size_name,
            current_color_name,
            current_qty,
            available_size_names,
            available_color_names
        )
        text = f"{product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n–¶–µ–Ω–∞: {product.price}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_media, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ safe_edit_message
        if callback_query.message.photo:
            await callback_query.message.edit_media(
                media=InputMediaPhoto(media=photo_file, caption=text),
                reply_markup=keyboard
            )
        else:
            await safe_edit_message(callback_query.message, text, reply_markup=keyboard)
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")



# 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(F.data.startswith('cart_item_delete_confirm:'))
async def cart_item_delete_confirm(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = callback_query.data.split(':')
    order_item_id = int(data[1])
    success = await rq.delete_cart_item(order_item_id)
    text = "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã." if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞."
    user_id = callback_query.from_user.id
    cart_orders = await rq.get_cart_order(str(user_id))
    items = []
    if cart_orders:
        for order in cart_orders:
            items.extend(order.order_items)
    if items:
        buttons = []
        for item in items:
            product = await rq.get_product(item.product_id)
            color_name = await rq.catalog_get_color_name(item.chosen_color) if item.chosen_color else "N/A"
            size_name = await rq.catalog_get_size_name(item.chosen_size) if item.chosen_size else "N/A"
            button_text = f"{product.name} ({color_name}, {size_name}) - {item.quantity} —à—Ç"
            callback_data = f"cart_edit_item:{item.id}"
            buttons.append((button_text, callback_data))
        keyboard = kb.get_cart_edit_list_keyboard(buttons)
    else:
        keyboard = kb.get_cart_main_keyboard()
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)


# 7. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def order_submit_event(event, state: FSMContext):
    # –ï—Å–ª–∏ event —è–≤–ª—è–µ—Ç—Å—è CallbackQuery, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø–æ–ª–µ message,
    # –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ event —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è Message
    if isinstance(event, CallbackQuery):
        base_msg: Message = event.message
        await event.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback
    else:
        base_msg: Message = event

    tuid = base_msg.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(base_msg.message_id)

    user_id = tuid
    user_info = await rq.get_user_info_by_id(str(user_id))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (—Å —É—á–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤)
    if user_info.get("full_name", "").strip() == "":
        await state.set_state(st.OrderInfo.waiting_fullname)
        text = "–ö–∞–∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –§–ò–û:"
        await safe_edit_message(base_msg, text, reply_markup=None)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å .strip())
    if user_info.get("phone_number", "").strip() == "":
        await delete_previous_messages(base_msg, tuid)
        await state.set_state(st.OrderInfo.waiting_phone)
        text = "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +996XXXXXXXXX):"
        sent_message = await base_msg.answer_photo(
            photo=utils.user_second_png,
            caption=text
        )
        user_data['bot_messages'].append(sent_message.message_id)
        return

    await state.set_state(st.OrderInfo.waiting_address)
    await delete_previous_messages(base_msg, tuid)
    text = ("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É. "
            "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç, –Ω–µ —Ö–æ—á—É –¥–æ—Å—Ç–∞–≤–∫—É'.")
    keyboard = kb.get_order_address_keyboard()
    sent_message = await base_msg.answer_photo(
        photo=utils.user_second_png,
        caption=text,
        reply_markup=keyboard
    )
    user_data['bot_messages'].append(sent_message.message_id)





@router.callback_query(F.data == 'order_submit')
async def order_submit_callback(callback_query: CallbackQuery, state: FSMContext):
    await order_submit_event(callback_query, state)


@router.message(st.OrderInfo.waiting_fullname)
async def process_fullname(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    fullname = message.text.strip()
    user_id = message.from_user.id
    await rq.update_user_fullname(str(user_id), fullname)
    await state.clear()
    await order_submit_event(message, state)


@router.message(st.OrderInfo.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    new_phone = message.text.strip()
    import re
    if not re.fullmatch(r'\+996\d{9}', new_phone):
        tuid = message.chat.id
        user_data = sent_message_add_screen_ids[tuid]
        user_data['user_messages'].append(message.message_id)
        await delete_previous_messages(message, tuid)
        sent_message = await message.answer_photo(
            photo=utils.user_second_png,
            caption="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        user_data['bot_messages'].append(sent_message.message_id)
        return
    user_id = message.from_user.id
    await rq.update_user_phone(str(user_id), new_phone)
    await state.clear()
    await order_submit_event(message, state)


@router.callback_query(F.data == 'order_address_skip')
async def order_address_skip(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    await rq.update_user_address(str(user_id), "")
    await state.clear()
    await order_confirmation_summary(callback_query, state)


@router.message(st.OrderInfo.waiting_address)
async def process_address(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    address = message.text.strip()
    user_id = message.from_user.id
    await rq.update_user_address(str(user_id), address)
    await state.clear()
    await order_confirmation_summary(message, state)


async def order_confirmation_summary(event, state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ event
    if isinstance(event, CallbackQuery):
        base_message: Message = event.message
    else:
        base_message: Message = event

    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ message_id –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_id = base_message.chat.id
    msg_id = base_message.message_id

    # –†–∞–±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä)
    user_data = sent_message_add_screen_ids[chat_id]
    user_data['user_messages'].append(msg_id)
    await delete_previous_messages(base_message, chat_id)

    user_id = event.from_user.id
    cart_orders = await rq.get_cart_order(str(user_id))
    items = []
    if cart_orders:
        for order in cart_orders:
            items.extend(order.order_items)
    if not items:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        keyboard = kb.get_cart_main_keyboard()
        msg = event.message if hasattr(event, 'message') else event
        await safe_edit_message(msg, text, reply_markup=keyboard)
        return
    lines = []
    total_cost = 0
    for idx, item in enumerate(items, start=1):
        product = await rq.get_product(item.product_id)
        color_name = await rq.catalog_get_color_name(item.chosen_color) if item.chosen_color else "N/A"
        size_name = await rq.catalog_get_size_name(item.chosen_size) if item.chosen_size else "N/A"
        line = (f"{idx}. {product.name} ({color_name}, {size_name}) - {item.quantity} —à—Ç * {product.price} = {item.quantity * float(product.price)}")
        lines.append(line)
        total_cost += item.quantity * float(product.price)
    user_info = await rq.get_user_info_by_id(str(user_id))
    order_type = "–¥–æ—Å—Ç–∞–≤–∫–∞" if user_info.get("address") else "–°–∞–º–æ–≤—ã–≤–æ–∑"
    summary = "\n".join(lines)
    text = (f"{summary}\n\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}\n\n"
            f"–ê–¥—Ä–µ—Å: {user_info.get('address', 'N/A')}\n"
            f"–ù–æ–º–µ—Ä: {user_info.get('phone_number', 'N/A')}\n"
            f"–§–ò–û: {user_info.get('full_name', 'N/A')}\n"
            f"–¢–∏–ø –∑–∞–∫–∞–∑–∞: {order_type}")
    keyboard = kb.get_order_confirm_keyboard()
    msg = event.message if hasattr(event, 'message') else event
    await msg.answer_photo(
        photo=utils.user_second_png,
        caption=text,
        reply_markup=keyboard
    )
    # await safe_edit_message(msg, text, reply_markup=keyboard)


# 8. –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == 'order_final_confirm')
async def order_final_confirm(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    cart_orders = await rq.get_cart_order(str(user_id))
    if not cart_orders:
        await safe_edit_message(callback_query.message, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=kb.get_cart_main_keyboard())
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await rq.submit_all_orders(str(user_id))
    text = "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏." if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    keyboard = kb.get_order_success_final_keyboard()
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)


# 9. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å)
@router.callback_query(F.data == 'order_edit_data')
async def order_edit_data(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    text = "–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    keyboard = kb.get_order_edit_data_keyboard()
    await safe_edit_message(callback_query.message, text, reply_markup=keyboard)

@router.callback_query(F.data == 'order_edit_cart')
async def order_edit_data(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await cart_main(callback_query, state)


@router.callback_query(F.data == 'edit_fullname')
async def edit_fullname(callback_query: CallbackQuery, state: FSMContext):
    tuid = callback_query.message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(callback_query.message.message_id)

    await callback_query.answer()
    await state.set_state(st.UserData.waiting_fullname)
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:"
    sent_message = await callback_query.message.edit_media(
        media=InputMediaPhoto(media=utils.user_second_png, caption=text)
    )
    user_data['bot_messages'].append(sent_message.message_id)


@router.message(st.UserData.waiting_fullname)
async def process_edit_fullname(message: Message, state: FSMContext):
    new_fullname = message.text.strip()
    user_id = message.from_user.id
    await rq.update_user_fullname(str(user_id), new_fullname)
    await state.clear()
    await order_confirmation_summary(message, state)


@router.callback_query(F.data == 'edit_phone')
async def edit_phone(callback_query: CallbackQuery, state: FSMContext):
    tuid = callback_query.message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(callback_query.message.message_id)

    await callback_query.answer()
    await state.set_state(st.UserData.waiting_phone)

    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +996XXXXXXXXX):"
    sent_message = await callback_query.message.edit_media(
        media=InputMediaPhoto(media=utils.user_second_png, caption=text)
    )
    user_data['bot_messages'].append(sent_message.message_id)


@router.message(st.UserData.waiting_phone)
async def process_edit_phone(message: Message, state: FSMContext):
    new_phone = message.text.strip()
    import re
    if not re.fullmatch(r'\+996\d{9}', new_phone):
        tuid = message.chat.id
        user_data = sent_message_add_screen_ids[tuid]
        user_data['user_messages'].append(message.message_id)
        await delete_previous_messages(message, tuid)
        sent_message = await message.answer_photo(
            photo=utils.user_second_png,
            caption="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        user_data['bot_messages'].append(sent_message.message_id)
        return
    user_id = message.from_user.id
    await rq.update_user_phone(str(user_id), new_phone)
    await state.clear()
    await order_confirmation_summary(message, state)


@router.callback_query(F.data == 'edit_address')
async def edit_address(callback_query: CallbackQuery, state: FSMContext):
    tuid = callback_query.message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(callback_query.message.message_id)

    await callback_query.answer()
    await state.set_state(st.UserData.waiting_address)
    keyboard = kb.get_address_edit_keyboard()

    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:"
    sent_message = await callback_query.message.edit_media(
        media=InputMediaPhoto(media=utils.user_second_png, caption=text)
    )
    user_data['bot_messages'].append(sent_message.message_id)


@router.message(st.UserData.waiting_address)
async def process_edit_address(message: Message, state: FSMContext):
    new_address = message.text.strip()
    user_id = message.from_user.id
    await rq.update_user_address(str(user_id), new_address)
    await state.clear()
    await order_confirmation_summary(message, state)


@router.callback_query(F.data == 'address_edit_skip')
async def address_edit_skip(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    await rq.update_user_address(str(user_id), "")
    await state.clear()
    await order_confirmation_summary(callback_query.message, state)


# 10. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ —ç–∫—Ä–∞–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(F.data == 'order_confirm_back')
async def order_confirm_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await cart_main(callback_query, state)

@router.callback_query(F.data == 'order_confirm_back_in')
async def order_confirm_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await order_confirmation_summary(callback_query, state)

@router.callback_query(F.data == 'go_to_user_cart')
async def go_to_user_cart(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
    await cart_main(callback_query, state)

