import json
import re
import pytz
from datetime import datetime
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart, Command
from aiogram import F, Router
from app.database import requests as rq
from aiogram.fsm.context import FSMContext
from app.utils import sent_message_add_screen_ids, router
from app.users.user import userStates as st
import app.users.user.userKeyboards as kb
from app import utils
from aiogram.enums import ParseMode


async def delete_previous_messages(message: Message, telegram_id: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id not in sent_message_add_screen_ids:
        sent_message_add_screen_ids[telegram_id] = {'bot_messages': [], 'user_messages': []}

    user_data = sent_message_add_screen_ids[telegram_id]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ "/start"
    for msg_id in user_data['user_messages']:
        try:
            if msg_id != message.message_id or message.text != "/start":
                await message.bot.delete_message(chat_id=telegram_id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    user_data['user_messages'].clear()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    for msg_id in user_data['bot_messages']:
        try:
            if msg_id != message.message_id:
                await message.bot.delete_message(chat_id=telegram_id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    user_data['bot_messages'].clear()


# User's personal account
async def user_account(message: Message, state: FSMContext):
    tuid = message.chat.id
    if tuid not in sent_message_add_screen_ids:
        sent_message_add_screen_ids[tuid] = {'bot_messages': [], 'user_messages': []}
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    await state.clear()

    sent_message = await message.answer_photo(
        photo=utils.user_png,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ",
        reply_markup=kb.user_button
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    user_data['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'go_to_user_dashboard')
async def go_to_dashboard(callback_query: CallbackQuery, state: FSMContext):
    await user_account(callback_query.message, state)


@router.callback_query(F.data == 'user_settings')
async def user_settings(callback_query: CallbackQuery, state: FSMContext):
    info = await rq.get_user_info_by_id(str(callback_query.from_user.id))
    print(callback_query.from_user.id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ info –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á "answer"
    if "answer" in info:
        caption = f"–û—à–∏–±–∫–∞: {info['answer']}"
    else:
        caption = (
            f"üë§ –§–ò–û: {info['full_name']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {info['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['phone_number']}"
        )
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption=caption
        ),
        reply_markup=kb.user_settings_setting
    )


@router.callback_query(F.data == 'change_fullname')
async def change_fullname(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
        ),
        reply_markup=kb.go_to_user_dashboard
    )
    await state.set_state(st.ChangeFullname.write_fullname)


@router.message(st.ChangeFullname.write_fullname)
async def change_fullname_second(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    is_updated = await rq.update_user_full_name(str(message.from_user.id), message.text)

    if is_updated:
        await message.answer("–í–∞—à–µ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                             reply_markup=kb.user_settings)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –§–ò–û",
                             reply_markup=kb.user_settings)


@router.callback_query(F.data == 'change_phone')
async def change_phone(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX:"
        ),
        reply_markup=kb.go_to_user_dashboard
    )
    await state.set_state(st.ChangePhone.write_phone)


@router.message(st.ChangePhone.write_phone)
async def change_phone_second(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    phone = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ñ–æ—Ä–º–∞—Ç +996XXXXXXXXX (4 —Å–∏–º–≤–æ–ª–∞ + 9 —Ü–∏—Ñ—Ä)
    if not re.fullmatch(r'\+996\d{9}', phone):
        sent_message = await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX",
            reply_markup=kb.user_settings
        )
        user_data['bot_messages'].append(sent_message.message_id)
        return

    is_updated = await rq.update_user_phone(str(message.from_user.id), phone)
    if is_updated:
        sent_message = await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.user_settings)
        user_data['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=kb.user_settings)
        user_data['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'change_delivery')
async def change_address(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=utils.user_second_png,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:"
        ),
        reply_markup=kb.go_to_user_dashboard
    )
    await state.set_state(st.ChangeAddress.write_address)


@router.message(st.ChangeAddress.write_address)
async def change_address_second(message: Message, state: FSMContext):
    tuid = message.chat.id
    user_data = sent_message_add_screen_ids[tuid]
    user_data['user_messages'].append(message.message_id)
    await delete_previous_messages(message, tuid)

    is_updated = await rq.update_user_address(str(message.from_user.id), message.text)
    if is_updated:
        await message.answer("–í–∞—à –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.user_settings)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å", reply_markup=kb.user_settings)