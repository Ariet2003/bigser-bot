from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from urllib.parse import quote

from app import utils

admin_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data='manage_products'),
     InlineKeyboardButton(text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data='manage_employees')],
    [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data='view_reports'),
     InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='send_notifications')]])

manage_employees_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='add_employee')],
    [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='edit_employee')],
    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='delete_employee')],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='go_to_dashboard')]
])

add_employee = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ûï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data='add_admin')],
    [InlineKeyboardButton(text="‚ûï –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data='add_manager')],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='go_to_dashboard')]
])

go_to_dashboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='go_to_dashboard')]
])

edit_employee = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úèÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data='edit_admin')],
    [InlineKeyboardButton(text="‚úèÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data='edit_manager')],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='go_to_dashboard')]
])


def create_admin_list_keyboard(admins: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
    for admin in admins:
        button = InlineKeyboardButton(
            text=f"{admin['full_name']}",
            callback_data=f"admin_detail:{admin['id']}"
        )
        markup.inline_keyboard.append([button])
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = admin_pagination_keyboard(page, has_prev, has_next)
    for row in pagination.inline_keyboard:
        markup.inline_keyboard.append(row)
    return markup


def admin_pagination_keyboard(page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    buttons = []
    if has_prev:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"admin_page:{page-1}"))
    if has_next:
        buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"admin_page:{page+1}"))
    markup = InlineKeyboardMarkup(inline_keyboard=[], row_width=2)
    if buttons:
        markup.inline_keyboard.append(buttons)
    return markup


def admin_detail_keyboard(admin_id: int) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_admin_fullname:{admin_id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_admin_role:{admin_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_admin")]
    ])
    return markup


def create_manager_list_keyboard(managers: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
    for manager in managers:
        button = InlineKeyboardButton(
            text=f"{manager['full_name']}",
            callback_data=f"admin_detail:{manager['id']}"
        )
        markup.inline_keyboard.append([button])
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = manager_pagination_keyboard(page, has_prev, has_next)
    for row in pagination.inline_keyboard:
        markup.inline_keyboard.append(row)
    return markup


def manager_pagination_keyboard(page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    buttons = []
    if has_prev:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"manager_page:{page-1}"))
    if has_next:
        buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"manager_page:{page+1}"))
    markup = InlineKeyboardMarkup(inline_keyboard=[], row_width=2)
    if buttons:
        markup.inline_keyboard.append(buttons)
    return markup


def manager_detail_keyboard(manager_id: int) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_admin_fullname:{manager_id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_admin_role:{manager_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_admin")]
    ])
    return markup



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
delete_employee_role_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="delete_admin")],
    [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="delete_manager")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_dashboard")]
])

def create_delete_list_keyboard(employees: list, page: int, has_prev: bool, has_next: bool, role: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç callback_data —Ñ–æ—Ä–º–∞—Ç–∞ "delete_detail:{role}:{user_id}".
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for employee in employees:
        button = InlineKeyboardButton(
            text=f"{employee['full_name']}",
            callback_data=f"delete_detail:{role}:{employee['id']}"
        )
        markup.inline_keyboard.append([button])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"delete_page:{role}:{page-1}"
        ))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"delete_page:{role}:{page+1}"
        ))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup

def confirm_delete_keyboard(employee_id: int, role: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{role}:{employee_id}:yes"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"confirm_delete:{role}:{employee_id}:no")
        ]
    ])
    return markup


manage_products_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üóÉÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='manage_categories'),
     InlineKeyboardButton(text="üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='manage_subcategories')],
    [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data='manage_one_product')],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='go_to_dashboard')]
])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
categories_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="edit_categories")],
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
    [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_dashboard")]
])

def create_category_list_keyboard(categories: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback_data —Ñ–æ—Ä–º–∞—Ç–∞ "category_detail:{category_id}"
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for category in categories:
        button = InlineKeyboardButton(
            text=f"{category['name']}",
            callback_data=f"category_detail:{category['id']}"
        )
        markup.inline_keyboard.append([button])
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"category_page:{page-1}"))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"category_page:{page+1}"))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup

def category_detail_keyboard(category_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É.
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_category:{category_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_category_detail:{category_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_categories")]
    ])
    return markup

def create_delete_category_list_keyboard(categories: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.
    Callback_data –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏: "delete_category_detail:{category_id}"
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for category in categories:
        button = InlineKeyboardButton(
            text=f"{category['name']}",
            callback_data=f"delete_category_detail:{category['id']}"
        )
        markup.inline_keyboard.append([button])
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"delete_category_page:{page-1}"))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"delete_category_page:{page+1}"))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup

def confirm_delete_category_keyboard(category_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_category:{category_id}:yes"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"confirm_delete_category:{category_id}:no")
        ]
    ])
    return markup



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
subcategories_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="edit_subcategories")],
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_subcategory")],
    [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_subcategory")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_dashboard")]
])

def create_subcategory_list_keyboard(subcategories: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    Callback_data –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏: "subcategory_detail:{subcategory_id}"
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for subcat in subcategories:
        button = InlineKeyboardButton(
            text=subcat['name'],
            callback_data=f"subcategory_detail:{subcat['id']}"
        )
        markup.inline_keyboard.append([button])
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"subcategory_page:{page-1}"))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"subcategory_page:{page+1}"))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup

def subcategory_detail_keyboard(subcategory_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç.
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_subcategory:{subcategory_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_subcategory_detail:{subcategory_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_subcategories")]
    ])
    return markup

def create_delete_subcategory_list_keyboard(subcategories: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.
    Callback_data –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏: "delete_subcategory_detail:{subcategory_id}"
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for subcat in subcategories:
        button = InlineKeyboardButton(
            text=subcat['name'],
            callback_data=f"delete_subcategory_detail:{subcat['id']}"
        )
        markup.inline_keyboard.append([button])
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"delete_subcategory_page:{page-1}"))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"delete_subcategory_page:{page+1}"))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup

def confirm_delete_subcategory_keyboard(subcategory_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_subcategory:{subcategory_id}:yes"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"confirm_delete_subcategory:{subcategory_id}:no")
        ]
    ])
    return markup

def create_parent_category_keyboard(categories: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    Callback_data: "parent_category:{category_id}"
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        button = InlineKeyboardButton(text=cat['name'], callback_data=f"parent_category:{cat['id']}")
        markup.inline_keyboard.append([button])
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"parent_category_page:{page-1}"))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"parent_category_page:{page+1}"))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup

def create_parent_category_keyboard_add(categories: list, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    Callback_data: "parent_category_add:{category_id}"
    """
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        button = InlineKeyboardButton(text=cat['name'], callback_data=f"parent_category_add:{cat['id']}")
        markup.inline_keyboard.append([button])
    pagination_buttons = []
    if has_prev:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"parent_category_add_page:{page-1}"))
    if has_next:
        pagination_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"parent_category_add_page:{page+1}"))
    if pagination_buttons:
        markup.inline_keyboard.append(pagination_buttons)
    return markup


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–¢–æ–≤–∞—Ä—ã"
product_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
     InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
    [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_dashboard")]
])
